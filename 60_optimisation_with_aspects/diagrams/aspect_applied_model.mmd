flowchart LR
    %% Aspects to apply
    updateConfidenceModel>Update Confidence Model]
    recordPrior>Set up prior distribution\nof character preferences]
    chooseBasedOnPrior>Select characters\nby prior distribution]
    chooseBasedOnConfidence>Select characters\nby confidence sigmoid]
    recordChoices>Record character choices]
    trackGameOutcome>Track game outcome]
    recordWinningPair>Record winning character pair\nobserved by players]
    ensureBestMove>Select best move\nfor players]
    cannotWin>Handle non-winnable state]
    
    %% CSS classes for aspects
    class updateConfidenceModel aspect
    class recordPrior aspect
    class chooseBasedOnPrior aspect
    class chooseBasedOnConfidence aspect
    class recordChoices aspect
    class trackGameOutcome aspect
    class recordWinningPair aspect
    class ensureBestMove aspect
    class cannotWin aspect

    class recordPrior priorDistributionModel
    class chooseBasedOnPrior priorDistributionModel
    class updateConfidenceModel learningModel
    class chooseBasedOnConfidence learningModel
    
    %% Gameplay steps
    pickChars((Each player\nselects characters))
    assignFirst(Randomly assign active player\nfor game start)
    takeTurn(Active player takes turn randomly)
    swapActive(Active player switches to\nother player)
    gameEndedCheck{{Is active player exhausted?}}
    gameEnd((Game ends\nActive player lost\nNon-active player won))

    %% Aspects to apply
    updateConfidenceModel -.-> pickChars
    recordPrior -.-> gameplay
    chooseBasedOnPrior -.-> pickChars
    chooseBasedOnConfidence -.-> pickChars
    recordChoices -.-> gameplay
    trackGameOutcome -.-> gameplay
    recordWinningPair -.-> gameplay
    ensureBestMove -.-> gameplay

    cannotWin -.-> takeTurn

    %% Gameplay graph
    subgraph gameplay [RPGLite Game]
        pickChars --> assignFirst --> takeTurn --> swapActive --> gameEndedCheck -- Yes --> gameEnd
        gameEndedCheck -- No --> takeTurn
    end