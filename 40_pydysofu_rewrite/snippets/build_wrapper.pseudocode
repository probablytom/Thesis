function build_wrapper(target):
    original_target_code $\gets$ get_code_for(target)
    return wrapper(target, original_target)

function wrapper(target, original_target):
    preludes, arounds, encores, error_handlers, fuzzers $\gets$ aspects_for(target)
    try:

        <--Fuzzing aspect implementation--!>
        if fuzzers is not empty:
            if target in fuzzer cache:
                target $\gets$ cache$\langle$target$\rangle$
            else:
                steps $\gets$ ast of target
                foreach fuzzer in fuzzers:
                    steps $\gets$ fuzzer(steps)
                if caching enabled:
                    cache$\langle$target$\rangle$ $\gets$ compile steps
                target $\gets$ compile steps

        <--Prelude advice implementation--!>
        foreach prelude in preludes:
            prelude(target)

        <--Around advice implementation: wrap target in around advice--!>
        foreach around in arounds:
            target $\gets$ partial around(target)
        
        <--Invoke target and around advice, by invoking wrapper built above--!>
        return_value $\gets$ target()

        <--Encore advice implementation--!>
        foreach encore in encores:
            new_return_value $\gets$ encore(target, return_value)
            if new_return_value is not None:
                return_value $\gets$ new_return_value 
        
        <--Reset changes from fuzzer--!>
        target $\gets$ original_target

        <--Return value originally returned by target--!>
        return return_value

    <--Exception handling advice implementation--!>
    catch Exception as error:
        target $\gets$ original_target
        prevent_raising $\gets$ False
        foreach handler in error_handlers:
            if handler(target, error):
                prevent_raising $\gets$ True
        raise error if not prevent_raising
